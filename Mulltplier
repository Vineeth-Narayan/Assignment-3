module mul_datapath(data_in,ldA,ldB,ldP,clrP,decB,clk,eqz);
  parameter N = 16;
  input [N-1:0] data_in;
  input ldA,ldB,ldP,clrP,decB,clk;
  output eqz;
  wire [N-1:0] Bus,X,Y,Z,Bout;
  assign Bus = data_in;
  
  PIPO1 A (ldA,clk,Bus,X);
  PIPO2 P (ldP,clk,Z,clrP,Y);
  COUNTER B (ldB,clk,decB,Bus,Bout);
  ADDER ADD (X,Y,Z);
  COMPARATOR COMP (Bout,eqz);
endmodule

module PIPO1(load,clk,d_in,d_out); 
  parameter N = 16;
  input [N-1:0] d_in;
  input load,clk;
  output reg [N-1:0] d_out;
  
  always @ (posedge clk)
    begin
      if(load) d_out <= d_in;
    end
endmodule

module PIPO2(load,clk,d_in,clear,d_out);
  parameter N = 16;
  input [N-1:0] d_in;
  input load,clk,clear;
  output reg [N-1:0]d_out;
  always @ (posedge clk)
    begin
      if(clear) d_out <= 16'b0;
      else if(load) d_out <= d_in;
    end
endmodule

module ADDER(Inp,Inp2,OP);
  parameter N = 16;
  input [N-1:0] Inp,Inp2;
  output reg [N-1:0] OP;
  
  always @(*)
    OP <= Inp + Inp2;
endmodule

module COMPARATOR(IP,OP);
  parameter N = 16;
  input [N-1:0] IP;
  output OP;
  assign OP = (IP == 0);
endmodule

module COUNTER(load,clk,dec,d_in,d_out);
  parameter N = 16;
  input [N-1:0] d_in;
  input load,clk,dec;
  output reg [N-1:0] d_out;
  
  always @ (posedge clk)
    begin
      if(load) d_out <= d_in;
      else if(dec) d_out <= d_out - 1;
    end
endmodule

module CONTROLLER(clk,eqz,start,done,ldA,ldB,ldP,decB,clrP);
  input clk,eqz,start;
  output reg ldA,ldB,ldP,decB,clrP,done;
  parameter S0 = 3'b0, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011, S4 = 3'b100;
  reg [2:0] state;
  
  always @ (posedge clk)
    case(state)
      S0: if(start) state <= S1;
      S1: state <= S2;
      S2: state <= S3;
      S3: #2 if(eqz) state <= S4;
      S4: state <= S4;
      default: state <= S0;
    endcase
    
    
    module te;
  reg [15:0] data_in; reg start,clk;
  wire done;
  
  mul_datapath DUT1(data_in,ldA,ldB,ldP,clrP,decB,clk,eqz);
  CONTROLLER DUT2(clk,eqz,start,done,ldA,ldB,ldP,decB,clrP);
  
  initial
    begin
      clk = 1'b0;
      #3 start = 1'b1;
      #500 $finish;
    end
  initial
    forever #5 clk = ~clk;
  initial
    begin
     
      $monitor($time,"%d %b",DUT1.Y,done);
    end
  
  initial
    begin
      #17 data_in = 17;
      #10 data_in = 5;
    end
endmodule
    
  
  always @ (state)
    case(state)
      S0: begin #1 ldA = 0;ldB = 0; ldP = 0; decB = 0; clrP = 0; done = 0;end
      S1: begin #1 ldA = 1;end
      S2: begin #1 ldA = 0;ldB = 1; clrP = 1;end
      S3: begin #1 ldB = 0;ldP = 1; decB = 1; clrP = 0; end
      S4: begin #1 ldP = 0; decB = 0; clrP = 0; done = 1;end
      default:begin #1 ldA = 0;ldB = 0;ldP = 0;decB = 0;clrP = 0;done = 0;end
    endcase
endmodule



