module GCD_data(gt,lt,eq,lda,ldb,sl1,sl2,slin,data_in,clk);
  input lda,ldb,sl1,sl2,slin,clk;
  input [15:0] data_in;
  output gt,lt,eq;
  wire [15:0] bus,aout,bout,x,y,subout;
  
  
  Pip A(aout,bus,lda,clk);
  Pip B(bout,bus,ldb,clk);
  Mux C(x,aout,bout,sl1);
  Mux D(y,aout,bout,sl2);
  Mux E(bus,subout,data_in,slin);
  Sub F(subout,x,y);
  Com G(lt,gt,eq,aout,bout);
endmodule

module Pip (data_o,data_i,ld,clk);
  input [15:0] data_i;
  input ld,clk;
  output reg[15:0] data_o;
  
  always @(posedge clk)
    if(ld) data_o <=data_i;
endmodule

module Sub(out,in1,in2);
  input [15:0] in1,in2;
  output reg [15:0] out;
  
  always @(*)
    out =in1-in2;
endmodule

module Com (lt,gt,eq,data1,data2);
  input [15:0] data1, data2;
  output lt,gt,eq;
  
  assign lt = (data1<data2);
  assign gt = (data1>data2);
  assign eq = (data1==data2);
 endmodule
      
module Mux (out ,in0,in1,sel);
  input [15:0] in0,in1;
  input sel;
  output [15:0] out;
  
  assign out = sel? in1:in0;
    
endmodule

module controller (lda,ldb,sel1,sel2,selin,done,clk,lt,gt,eq,start);
  input clk,lt,gt,eq,start;
  output reg lda ,ldb ,sel1,sel2,selin,done;
  
  reg[2:0] state;
  parameter s0=3'b000 , s1 =3'b001, s2=3'b010, s3=3'b011,s4=3'b100,s5=3'b101;
  
  always @(posedge clk)
    begin 
      case (state)
        s0: if(start) state <= s1;
        s1:  state <=s2;
        s2 : #2 if(eq) state <= s5;
        		else  if(lt) state <= s3;
        		else  if(gt) state <= s4;
        s3 : #2 if(eq) state <= s5;
        		else  if(lt) state <= s3;
        		else  if(gt) state <= s4;
        s4 : #2 if(eq) state <= s5;
        		else  if(lt) state <= s3;
        		else  if(gt) state <= s4;
        s5 : state <= s5;
        default : state <= s0;
      endcase;
    end
  
  always@(state)
    begin
      case(state)
        s0 : begin selin=1; lda=1; ldb=0; done=0; end
        s1 : begin selin=1; lda=0; ldb=1; end
        s2 : if(eq) done=1;
        	 else if(lt) begin
          					sel1=1; sel2=0;selin=0;
          					#1 lda=0;ldb=1;
        				 end
        	 else if(gt) begin
          					sel1=0; sel2=1;selin=0;
          					#1 lda=1;ldb=0;
        				 end
        
        s3 : if(eq) done=1;
        	 else if(lt) begin
          					sel1=1; sel2=0;selin=0;
          					#1 lda=0;ldb=1;
        				 end
        	 else if(gt) begin
          					sel1=0; sel2=1;selin=0;
          					#1 lda=1;ldb=0;
        				 end
        s4 : if(eq) done=1;
        	 else if(lt) begin
          					sel1=1; sel2=0;selin=0;
          					#1 lda=0;ldb=1;
        				 end
        	 else if(gt) begin
          					sel1=0; sel2=1;selin=0;
          					#1 lda=1;ldb=0;
        				 end
        s5 : begin
          		done=1; sel1=0; sel2=0; lda=0; ldb=0;
        	 end
        
        default : begin lda=0; ldb=0; end
      endcase
    end
endmodule


module test;
  reg [15:0] data_in;
  reg clk,start;
  wire done;
  reg[15:0] a,b;
  wire lda,ldb,sel1,sel2,selin,lt,gt,eq;
  
  GCD_data z(gt,lt,eq,lda,ldb,sel1,sel2,selin,data_in,clk);
  controller control(lda,ldb,sel1,sel2,selin,done,clk,lt,gt,eq,start);
  
  initial
    begin
      clk = 1;
      #3 start = 1;
      #1000 $finish;
    end
  
  always #5 clk = ~clk;
  
  initial 
    begin
      #12 data_in = 68;
      #10 data_in = 24;
    end
  
  initial
  	begin
      $monitor($time, " %d %b ", z.aout,done);

    end
endmodule
